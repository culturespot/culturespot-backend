dependencies {

    runtimeOnly 'com.h2database:h2'
    implementation 'mysql:mysql-connector-java:8.0.33'
    api 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Spring Security core (PasswordEncoder 의존성 사용하기 위함)
    implementation 'org.springframework.security:spring-security-core:5.8.1'

    // QueryDSL 설정
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // miniO
    implementation 'io.minio:minio:8.4.3'

    // AWS
    implementation("org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE") // AWS S3 사용

    // Tika : MIME타입 검사
    implementation group: 'org.apache.tika', name: 'tika-core', version: '3.0.0'

    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'

    // Mockito 기본
    testImplementation 'org.mockito:mockito-core:5.2.0'

    // Mockito JUnit 5 연동
    testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'
}

def buildDir = layout.buildDirectory.get().asFile
def querydslDir = new File(buildDir, "generated/querydsl")

// QueryDSL이 생성한 파일을 Java 소스 코드로 인식하도록 설정
sourceSets {
    main.java.srcDir querydslDir
}

// Java 컴파일러가 QueryDSL QClass를 올바른 경로에 생성하도록 설정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

// clean 시 QueryDSL QClass 삭제
clean.doLast {
    delete querydslDir
}

tasks.register("prepareKotlinBuildScriptModel"){}